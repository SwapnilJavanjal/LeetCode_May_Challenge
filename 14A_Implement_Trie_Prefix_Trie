class Trie {

    /** Initialize your data structure here. */
    class Node {
        char c;
        HashMap<Character, Node> map;
        int end;
        public Node(char ch) {
            c = ch;
            map = new HashMap<Character, Node>();
            end = 0;
        }
    }
    Node root;
    public Trie() {
        root = new Node ('0');
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        
        Node node = root;
        for(int i = 0; i < word.length(); i++) {
            char ch = word.charAt(i);
            if(!node.map.containsKey(ch)) {
                Node temp = new Node(ch);
                node.map.put(ch, temp);
            }
            
            if(i == word.length() - 1){
                Node temp = node.map.get(ch);
                temp.end = 1;
                node.map.put(ch, temp);
            }
            
            node = node.map.get(ch);
        }
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        
        Node node = root;
        for(int i = 0; i < word.length(); i++) {
            char ch = word.charAt(i);
            if(!node.map.containsKey(ch)) {
               return false;
            }
            
            if(i == word.length() - 1){
                
                Node temp = node.map.get(ch);
                if(temp.end == 1)
                    return true;
                else
                    return false;
            }
            
            node = node.map.get(ch);
        }
        return false;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String word) {
     
         Node node = root;
        for(int i = 0; i < word.length(); i++) {
            char ch = word.charAt(i);
            if(!node.map.containsKey(ch)) {
               return false;
            } 

            node = node.map.get(ch);
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
